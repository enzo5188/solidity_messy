{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bytes16",
						"name": "x",
						"type": "bytes16"
					},
					{
						"internalType": "bytes16",
						"name": "y",
						"type": "bytes16"
					}
				],
				"name": "div",
				"outputs": [
					{
						"internalType": "bytes16",
						"name": "",
						"type": "bytes16"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"div(bytes16,bytes16)": {
					"params": {
						"x": "quadruple precision number",
						"y": "quadruple precision number"
					},
					"returns": {
						"_0": "quadruple precision number"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"div(bytes16,bytes16)": {
					"notice": "Calculate x / y.  Special values behave in the following way: NaN / x = NaN for any x. x / NaN = NaN for any x. Infinity / x = Infinity for any finite non-negative x. Infinity / x = -Infinity for any finite negative x including -0. -Infinity / x = -Infinity for any finite non-negative x. -Infinity / x = Infinity for any finite negative x including -0. x / Infinity = 0 for any finite non-negative x. x / -Infinity = -0 for any finite non-negative x. x / Infinity = -0 for any finite non-negative x including -0. x / -Infinity = 0 for any finite non-negative x including -0.  Infinity / Infinity = NaN. Infinity / -Infinity = -NaN. -Infinity / Infinity = -NaN. -Infinity / -Infinity = NaN. Division by zero behaves in the following way: x / 0 = Infinity for any finite positive x. x / -0 = -Infinity for any finite positive x. x / 0 = -Infinity for any finite negative x. x / -0 = Infinity for any finite negative x. 0 / 0 = NaN. 0 / -0 = NaN. -0 / 0 = NaN. -0 / -0 = NaN."
				}
			},
			"notice": "Smart contract library of mathematical functions operating with IEEE 754 quadruple-precision binary floating-point numbers (quadruple precision numbers).  As long as quadruple precision numbers are 16-bytes long, they are represented by bytes16 type.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/AKA.sol": "ABDKMathQuad"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/AKA.sol": {
			"keccak256": "0x8c6ad75b4fe00cba62fb4a0489c4c8cf40bff12e16aca755e6b55aab86d20f77",
			"license": "BSD-4-Clause",
			"urls": [
				"bzz-raw://fbdbf4adbb3a23e07082546928dafdeaefa4bed2c0af710357de0655415661b6",
				"dweb:/ipfs/QmWjjWgD7n1ifJqRGK4GupzXm8YF6uL8fye2MBCYgeFcMy"
			]
		}
	},
	"version": 1
}