{
	"compiler": {
		"version": "0.8.23+commit.f704f362"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_symbol",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "_maxTotalSupply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_teamSupply",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_team",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_payment",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "_unrevealedURI",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "_trustedForwarder",
						"type": "address"
					},
					{
						"internalType": "uint64",
						"name": "_subscriptionId",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "_vrfCoordinator",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "collector1",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "collector2",
								"type": "address"
							},
							{
								"internalType": "uint16",
								"name": "collector1Ratio",
								"type": "uint16"
							}
						],
						"internalType": "struct NeowizERC721.SalesInfo",
						"name": "_salesInfo",
						"type": "tuple"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AddressZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "AlreadyRevealed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "IncorrectProof",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidCollectorRatio",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidTimestamp",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "round",
						"type": "uint256"
					}
				],
				"name": "MaxMintExceeded",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "round",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "MaxMintPerAccountExceeded",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MaxTotalSupplyExceeded",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MaxTotalTeamMintExceeded",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotAllRoundsFinished",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotEnoughERC20Fund",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotEnoughFund",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotExistingRound",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotPrivate",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotPublic",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotSoldout",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "have",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "want",
						"type": "address"
					}
				],
				"name": "OnlyCoordinatorCanFulfill",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "PriceNotSet",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "RoundEnded",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "RoundNotStarted",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "WrongSaleRound",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ZeroMaxTotalSupply",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "ApprovalReceived",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "uri",
						"type": "string"
					}
				],
				"name": "BaseURIUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "maxMint",
						"type": "uint256"
					}
				],
				"name": "MaxMintPerAccountUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "maxMint",
						"type": "uint256"
					}
				],
				"name": "MaxMintUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "merkleRoot",
						"type": "bytes32"
					}
				],
				"name": "MerkleRootUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "NewOperator",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "trustedForwarder",
						"type": "address"
					}
				],
				"name": "NewTrustedForwarder",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "payment",
						"type": "address"
					}
				],
				"name": "PaymentUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"name": "PriceUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Revealed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "state",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "maxMintPerAccount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "maxMint",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "merkleRoot",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startTs",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "endTs",
						"type": "uint256"
					}
				],
				"name": "RoundAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startTs",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "endTs",
						"type": "uint256"
					}
				],
				"name": "RoundTimestampUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "feeBasisPoints",
						"type": "uint96"
					}
				],
				"name": "RoyaltyInfoUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "state",
						"type": "uint256"
					}
				],
				"name": "StateUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "TransferReceived",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "uri",
						"type": "string"
					}
				],
				"name": "UnrevealedURIUpdated",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "COORDINATOR",
				"outputs": [
					{
						"internalType": "contract VRFCoordinatorV2Interface",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_TOTAL_SUPPLY",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "PERMIT_TYPEHASH",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "TEAM_SUPPLY",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "_buildDigest",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "enum NeowizERC721.SaleState",
						"name": "_state",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "_maxMintPerAccount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxMint",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "_merkleRoot",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "_startTs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_endTs",
						"type": "uint256"
					}
				],
				"name": "addRound",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "_merkleProof",
						"type": "bytes32[]"
					},
					{
						"internalType": "bytes32",
						"name": "_root",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					}
				],
				"name": "checkValidity",
				"outputs": [],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentRound",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isRevealed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "forwarder",
						"type": "address"
					}
				],
				"name": "isTrustedForwarder",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_quantity",
						"type": "uint256"
					}
				],
				"name": "mintResidue",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numRounds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_round",
						"type": "uint256"
					}
				],
				"name": "numberMintedInRound",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "onApprovalReceived",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "onTransferReceived",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "operator",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "payment",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "_merkleProof",
						"type": "bytes32[]"
					},
					{
						"internalType": "uint256",
						"name": "_quantity",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_round",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_payment",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					}
				],
				"name": "privateMint",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "_merkleProof",
						"type": "bytes32[]"
					},
					{
						"internalType": "uint256",
						"name": "_quantity",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_round",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_payment",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "privateMintWithPermit",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_quantity",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_round",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_payment",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					}
				],
				"name": "publicMint",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_quantity",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_round",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_payment",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "publicMintWithPermit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "randomSeed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ratioDenominator",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "randomWords",
						"type": "uint256[]"
					}
				],
				"name": "rawFulfillRandomWords",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_keyHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint16",
						"name": "_requestConfirmations",
						"type": "uint16"
					},
					{
						"internalType": "uint32",
						"name": "_callbackGasLimit",
						"type": "uint32"
					}
				],
				"name": "requestRandomSeed",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "revealed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "rounds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "maxMintPerAccount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxMint",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalMinted",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "enum NeowizERC721.SaleState",
						"name": "state",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "merkleRoot",
						"type": "bytes32"
					},
					{
						"internalType": "uint64",
						"name": "startTs",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "endTs",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_salePrice",
						"type": "uint256"
					}
				],
				"name": "royaltyInfo",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "salesInfo",
				"outputs": [
					{
						"internalType": "address",
						"name": "collector1",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "collector2",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "collector1Ratio",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_uri",
						"type": "string"
					}
				],
				"name": "setBaseURI",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOperator",
						"type": "address"
					}
				],
				"name": "setOperator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_payment",
						"type": "address"
					}
				],
				"name": "setPayment",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"internalType": "uint96",
						"name": "feeBasisPoints",
						"type": "uint96"
					}
				],
				"name": "setRoyaltyInfo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_forwarder",
						"type": "address"
					}
				],
				"name": "setTrustedForwarder",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_unrevealedURI",
						"type": "string"
					}
				],
				"name": "setUnRevealedURI",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "subscriptionId",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "team",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_quantity",
						"type": "uint256"
					}
				],
				"name": "teamMint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalMinted",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalTeamMinted",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unrevealedURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_roundId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxMint",
						"type": "uint256"
					}
				],
				"name": "updateMaxMint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_roundId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxMintPerAccount",
						"type": "uint256"
					}
				],
				"name": "updateMaxMintPerAccount",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_roundId",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "_merkleRoot",
						"type": "bytes32"
					}
				],
				"name": "updateMerkleRoot",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_roundId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					}
				],
				"name": "updatePrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_roundId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_startTs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_endTs",
						"type": "uint256"
					}
				],
				"name": "updateRoundTimestamp",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_roundId",
						"type": "uint256"
					},
					{
						"internalType": "enum NeowizERC721.SaleState",
						"name": "_state",
						"type": "uint8"
					}
				],
				"name": "updateState",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
				},
				"ApprovalForAll(address,address,bool)": {
					"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
				}
			},
			"kind": "dev",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"details": "This is not set as a constant, to ensure that the chainId will change in the event of a chain fork",
					"returns": {
						"_0": "the DOMAIN_SEPARATOR of eip712"
					}
				},
				"_buildDigest(address,uint256,uint256,uint256)": {
					"params": {
						"deadline": "the deadline before when the permit can be used",
						"nonce": "the nonce to make a permit for",
						"spender": "the token spender",
						"tokenId": "the tokenId"
					},
					"returns": {
						"_0": "the digest (following eip712) to sign"
					}
				},
				"addRound(uint8,uint256,uint256,uint256,bytes32,uint256,uint256)": {
					"details": "onlyOperator",
					"params": {
						"_endTs": "The timestamp when this round ends",
						"_maxMint": "The max amount of tokens reserved in this round",
						"_maxMintPerAccount": "The max amount of tokens one account can mint in this round",
						"_merkleRoot": "This is useful only in a private round",
						"_price": "The unit price per token",
						"_startTs": "The timestamp when this round starts",
						"_state": "private or public"
					}
				},
				"approve(address,uint256)": {
					"details": "See {IERC721-approve}."
				},
				"balanceOf(address)": {
					"details": "See {IERC721-balanceOf}."
				},
				"checkValidity(bytes32[],bytes32,address)": {
					"details": "All leaf nodes are hashed using keccak256",
					"params": {
						"_merkleProof": "The proof for the leaf of the whitelist.",
						"_root": "The merkle root",
						"_to": "The address to be checked"
					}
				},
				"constructor": {
					"params": {
						"_maxTotalSupply": "The max token amount allowed to mint regardless of how many tokens are burnt.",
						"_name": "The name of the token",
						"_payment": "The address of token to pay when minting. Set zero to use ETH.",
						"_subscriptionId": "Your chainlink subscriptionId. Constants from https://docs.chain.link/docs/vrf-contracts/",
						"_symbol": "The symbol of the token",
						"_team": "The address to receive tokens in team-minting",
						"_teamSupply": "The token amount reserved for team",
						"_trustedForwarder": "The address of ERC2771 forwarder",
						"_unrevealedURI": "The ipfs uri of metadata before reveal",
						"_vrfCoordinator": "Chainlink vrfCoordinator in the network. See https://docs.chain.link/docs/vrf-contracts/#configurations"
					}
				},
				"getApproved(uint256)": {
					"details": "See {IERC721-getApproved}."
				},
				"isApprovedForAll(address,address)": {
					"details": "See {IERC721-isApprovedForAll}."
				},
				"mintResidue(uint256)": {
					"details": "onlyOperator",
					"params": {
						"_quantity": "Given type(uint256).max, mint all remainders except for the team amount."
					}
				},
				"name()": {
					"details": "See {IERC721Metadata-name}."
				},
				"nonces(uint256)": {
					"params": {
						"tokenId": "token id"
					},
					"returns": {
						"_0": "current token nonce"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"ownerOf(uint256)": {
					"details": "See {IERC721-ownerOf}."
				},
				"permit(address,uint256,uint256,bytes)": {
					"params": {
						"deadline": "the deadline for the permit to be used",
						"signature": "permit",
						"spender": "the actor to approve",
						"tokenId": "the token id"
					}
				},
				"privateMint(bytes32[],uint256,uint256,address,uint256)": {
					"details": "Private round only allows whitelisted users.",
					"params": {
						"_merkleProof": "The proof for the leaf of the whitelist.",
						"_payment": "The payment token address",
						"_price": "The price of one nft",
						"_quantity": "The number of tokens to mint.",
						"_round": "The round id"
					}
				},
				"privateMintWithPermit(bytes32[],uint256,uint256,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "Private round only allows whitelisted users.",
					"params": {
						"_merkleProof": "The proof for the leaf of the whitelist.",
						"_payment": "The payment token address",
						"_price": "The price of one nft",
						"_quantity": "The number of tokens to mint.",
						"_round": "The round id",
						"r": "ERC20Permit signature r from the`owner`",
						"s": "ERC20Permit signature s from the`owner`",
						"v": "ERC20Permit signature v from the`owner`"
					}
				},
				"publicMint(uint256,uint256,address,uint256)": {
					"params": {
						"_payment": "The payment token address",
						"_price": "The price of one nft",
						"_quantity": "The number of tokens to mint.",
						"_round": "The round id"
					}
				},
				"publicMintWithPermit(uint256,uint256,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"params": {
						"_payment": "The payment token address",
						"_price": "The price of one nft",
						"_quantity": "The number of tokens to mint.",
						"_round": "The round id",
						"r": "ERC20Permit signature r from the`owner`",
						"s": "ERC20Permit signature s from the`owner`",
						"v": "ERC20Permit signature v from the`owner`"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"requestRandomSeed(bytes32,uint16,uint32)": {
					"details": "The callback `_setRandomSeed` requires all tokens to be minted.",
					"params": {
						"_callbackGasLimit": "Callback function gas limit",
						"_keyHash": "Chainlink-provided Key Hash",
						"_requestConfirmations": "Variable number of confirmations"
					}
				},
				"royaltyInfo(uint256,uint256)": {
					"details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "See {IERC721-safeTransferFrom}."
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "See {IERC721-safeTransferFrom}."
				},
				"setApprovalForAll(address,bool)": {
					"details": "See {IERC721-setApprovalForAll}."
				},
				"setBaseURI(string)": {
					"details": "onlyOperator"
				},
				"setOperator(address)": {
					"details": "onlyOwner"
				},
				"setPayment(address)": {
					"details": "onlyOperator"
				},
				"setRoyaltyInfo(address,uint96)": {
					"details": "onlyOwner",
					"params": {
						"feeBasisPoints": "The fee rate is equal to `feeBasisPoint / ERC2981._feeDenominator()`",
						"receiver": "Royalty receiver address"
					}
				},
				"setTrustedForwarder(address)": {
					"details": "onlyOwner"
				},
				"setUnRevealedURI(string)": {
					"details": "onlyOperator"
				},
				"supportsInterface(bytes4)": {
					"params": {
						"interfaceId": "The interface identifier, as specified in ERC-165"
					}
				},
				"symbol()": {
					"details": "See {IERC721Metadata-symbol}."
				},
				"teamMint(uint256)": {
					"details": "onlyOperator",
					"params": {
						"_quantity": "The number of tokens to mint."
					}
				},
				"tokenURI(uint256)": {
					"details": "Throws if `_tokenId` is not a valid NFT."
				},
				"totalSupply()": {
					"details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC721-transferFrom}."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"updateMaxMint(uint256,uint256)": {
					"details": "onlyOperator"
				},
				"updateMaxMintPerAccount(uint256,uint256)": {
					"details": "onlyOperator"
				},
				"updateMerkleRoot(uint256,bytes32)": {
					"details": "onlyOperator"
				},
				"updatePrice(uint256,uint256)": {
					"details": "onlyOperator"
				},
				"updateRoundTimestamp(uint256,uint256,uint256)": {
					"details": "onlyOperator",
					"params": {
						"_endTs": "_endTs must <= startTs of the next round",
						"_startTs": "_startTs must >= endTs of the previous round"
					}
				},
				"updateState(uint256,uint8)": {
					"details": "onlyOperator"
				},
				"withdraw(uint256)": {
					"details": "onlyOperator",
					"params": {
						"_amount": "the amount to send"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"notice": "Builds the DOMAIN_SEPARATOR (eip712) at time of use"
				},
				"_buildDigest(address,uint256,uint256,uint256)": {
					"notice": "Builds the permit digest to sign"
				},
				"addRound(uint8,uint256,uint256,uint256,bytes32,uint256,uint256)": {
					"notice": "Add a minting round"
				},
				"checkValidity(bytes32[],bytes32,address)": {
					"notice": "Check the given merkle proof is valid"
				},
				"currentRound()": {
					"notice": "Returns the current round number"
				},
				"isRevealed()": {
					"notice": "Returns whether the NFT is revealed"
				},
				"mintResidue(uint256)": {
					"notice": "Mint unminted nfts to `team` before the reveal. This excludes the team amount."
				},
				"nonces(uint256)": {
					"notice": "Allows to retrieve current nonce for token"
				},
				"numberMintedInRound(address,uint256)": {
					"notice": "Returns how many tokens the account minted in the round"
				},
				"operator()": {
					"notice": "Returns the address of operator"
				},
				"privateMint(bytes32[],uint256,uint256,address,uint256)": {
					"notice": "Mint a private drop"
				},
				"privateMintWithPermit(bytes32[],uint256,uint256,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"notice": "Mint a private drop with ERC20 permit signature"
				},
				"publicMint(uint256,uint256,address,uint256)": {
					"notice": "Mint a public drop"
				},
				"publicMintWithPermit(uint256,uint256,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"notice": "Mint a public drop with ERC20 permit signature"
				},
				"requestRandomSeed(bytes32,uint16,uint32)": {
					"notice": "Request random number through Chainlink VRF."
				},
				"setRoyaltyInfo(address,uint96)": {
					"notice": "Sets the contract-wide ERC-2981 royalty info."
				},
				"supportsInterface(bytes4)": {
					"notice": "Query if a contract implements an interface"
				},
				"teamMint(uint256)": {
					"notice": "Mint to `team`"
				},
				"tokenURI(uint256)": {
					"notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
				},
				"totalMinted()": {
					"notice": "Returns the total amount of tokens minted in the contract."
				},
				"totalTeamMinted()": {
					"notice": "Returns the total amount of tokens minted by the team."
				},
				"withdraw(uint256)": {
					"notice": "Withdraw the minting revenue"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/ChainLinkNeowizERC721.sol": "ChainLinkNeowizERC721"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/ChainLinkNeowizERC721.sol": {
			"keccak256": "0x20bb807dd30aa9f0aaf89dc833932362031a837ea2a461ef511bb28727dbd1d9",
			"license": "MIT",
			"urls": [
				"bzz-raw://20984beb83b56c59e81e2f5691901f86ff8799a096e3036c3f7568c678836ebf",
				"dweb:/ipfs/QmNcm268MYuGKcRpqySfD28QE44NzV4DsFA5urYDQqaaTp"
			]
		},
		"contracts/NeowizERC721.sol": {
			"keccak256": "0x934da752908725919d5d10a146e09c55f6aa431e2a8050cd75e6c2c16d10a804",
			"license": "MIT",
			"urls": [
				"bzz-raw://1bc9e1c0b32beab2164c44b0747dc6953bec8f3498b81816868b25e61d65731f",
				"dweb:/ipfs/QmdKpYkgbeuNS6PC5aZk65xJ7E559UrBuhJbNSdNH5jr4Y"
			]
		},
		"contracts/erc721-permits/ERC721WithPermit.sol": {
			"keccak256": "0x4e8b73171656228409f2cb3cf2659fa7a80fcaba000444738af86f8ae15ffbdb",
			"license": "MIT",
			"urls": [
				"bzz-raw://867bc8d80d3ee492fca8f7067e6d8a9d1523dc76001f6da1d572b0a5aec73b92",
				"dweb:/ipfs/QmWi1PAWZzPcbfjg9JpT82ZKWVabMLn6WrNe2j6DSPKHGG"
			]
		},
		"contracts/erc721-permits/IERC721WithPermit.sol": {
			"keccak256": "0x6a78643020512a5cf57d0d3b47871d002fb84e9f9dac12ea99879c38c2ce60e5",
			"license": "MIT",
			"urls": [
				"bzz-raw://c4cfc5020d449e6424358a65231db554ed30b74403e9dba8e0b8d928f9278eec",
				"dweb:/ipfs/QmRZT9xZ8GuQ69kxqmY9q9v6gTZgoRdw5bhj9VtmBuchZK"
			]
		},
		"contracts/interfaces/INeowizERC721.sol": {
			"keccak256": "0x676c7eeacbb186efcba786e7f33534c2a6acd52a6e276b09cc3d850be50d31f0",
			"license": "MIT",
			"urls": [
				"bzz-raw://71ce66f8d52346edeff93b24f8a91a3fbec508266bd70b359789b5253d45660e",
				"dweb:/ipfs/QmPc3FQoCLuGL6AAofoA2VDL7S1aZfqFbx4sDWm83c9DAn"
			]
		},
		"contracts/libs/@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
			"keccak256": "0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904",
			"license": "MIT",
			"urls": [
				"bzz-raw://038eef992d813c20737fbe94e3a36e5d541d1aa736158dd2a43dd5b840b8c360",
				"dweb:/ipfs/QmZWJ25Yr1sUSAsfJRKvTMDmGkmy63hHhB495CUL1bpNz4"
			]
		},
		"contracts/libs/@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
			"keccak256": "0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494",
			"license": "MIT",
			"urls": [
				"bzz-raw://4bd670a55aacc0ab372835cd7e21b487f9fb69d8c6375234b68862a58f3b1153",
				"dweb:/ipfs/QmRMdB9TFLgG1LXg9VSTWbZZ1yf3uY1RY3pPkoMN23JfZk"
			]
		},
		"contracts/libs/@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
			"license": "MIT",
			"urls": [
				"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
				"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
			]
		},
		"contracts/libs/@openzeppelin/contracts/interfaces/IERC1271.sol": {
			"keccak256": "0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544",
			"license": "MIT",
			"urls": [
				"bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e",
				"dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng"
			]
		},
		"contracts/libs/@openzeppelin/contracts/interfaces/IERC1363Receiver.sol": {
			"keccak256": "0x28584e7e468ad231d928452d1b8f73a50a1f38097e4c3b07dbfbe4d60f675761",
			"license": "MIT",
			"urls": [
				"bzz-raw://282e71f94c0e322a2db794f3bf328e7c46187872a65f78301c8137572574f7a3",
				"dweb:/ipfs/QmP1QuKWCtMnexeoK9GAk4qakFhEJzxEmRocEugjdSE4bR"
			]
		},
		"contracts/libs/@openzeppelin/contracts/interfaces/IERC1363Spender.sol": {
			"keccak256": "0x64051f64615addb4c98fa379d4b70c6b7ddb038345a84c6a2bb56b966fd0a966",
			"license": "MIT",
			"urls": [
				"bzz-raw://7b08ae60e259d1ef49728e9a766ed79339e92baf7df6417f900e418d8b21aef8",
				"dweb:/ipfs/QmZhYy3a3BVFZvDpc8DXvtC6Po8NGyz53ygHRq3rP1ZXJp"
			]
		},
		"contracts/libs/@openzeppelin/contracts/interfaces/IERC2981.sol": {
			"keccak256": "0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b",
			"license": "MIT",
			"urls": [
				"bzz-raw://f5522afc5c222c810d9ad67c45f37cb7169452fcf76692cad10ac8153c068daa",
				"dweb:/ipfs/QmX4XgnDp7pyvojQ6g5tacrUMCf7TED2qC2vERH9Xh9feZ"
			]
		},
		"contracts/libs/@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935",
			"license": "MIT",
			"urls": [
				"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2",
				"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud"
			]
		},
		"contracts/libs/@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238",
			"license": "MIT",
			"urls": [
				"bzz-raw://43e46da9d9f49741ecd876a269e71bc7494058d7a8e9478429998adb5bc3eaa0",
				"dweb:/ipfs/QmUtp4cqzf22C5rJ76AabKADquGWcjsc33yjYXxXC4sDvy"
			]
		},
		"contracts/libs/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
				"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
			]
		},
		"contracts/libs/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
				"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
			]
		},
		"contracts/libs/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
			"keccak256": "0x07536242e24ee7067295d32c08e495a33e605f3c52f8ee4ec3bdcb7a351313d2",
			"license": "MIT",
			"urls": [
				"bzz-raw://01f99dbf2ce567a64a03fc4d38b76d64d52bf1a2302922971446b1cf777220ec",
				"dweb:/ipfs/QmSiotbcG2KMuXfbKyKTcHu9ujBp67jmbULJyYLDpsrpC1"
			]
		},
		"contracts/libs/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
			"keccak256": "0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329",
			"license": "MIT",
			"urls": [
				"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95",
				"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7"
			]
		},
		"contracts/libs/@openzeppelin/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e",
			"license": "MIT",
			"urls": [
				"bzz-raw://4c827c981a552d1c76c96060e92f56b52bc20c6f9b4dbf911fe99ddbfb41f2ea",
				"dweb:/ipfs/QmW8xvJdzHrr8Ry34C7viBsgG2b8T1mL4BQWJ5CdfD9JLB"
			]
		},
		"contracts/libs/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f",
			"license": "MIT",
			"urls": [
				"bzz-raw://20a97f891d06f0fe91560ea1a142aaa26fdd22bed1b51606b7d48f670deeb50f",
				"dweb:/ipfs/QmTbCtZKChpaX5H2iRiTDMcSz29GSLCpTCDgJpcMR4wg8x"
			]
		},
		"contracts/libs/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
				"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
			]
		},
		"contracts/libs/@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
			"keccak256": "0xfa6873a010382f62e9ffe4592b305ef6e60f55502c95ed0ffa51eb10b5200d45",
			"license": "MIT",
			"urls": [
				"bzz-raw://f86000c6885fb5a0a8bd5cd2595d302f0b4038411d66b85b07fa10590f844c2e",
				"dweb:/ipfs/QmeZuXaxdr7NH2wUAprx3BcLTke9RtcptAZgRKfQVHops5"
			]
		},
		"contracts/libs/@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol": {
			"keccak256": "0x7cdc887a364b6e3f9669bb4b16582e135121437399ac69d41db15012e09b96cc",
			"license": "MIT",
			"urls": [
				"bzz-raw://ce1c4fcd6eafe8f6b8daf541a2cccfcd44368aa0a697c567a5b875edc8c43fea",
				"dweb:/ipfs/QmcN4HhvYveWTtcGfUY3vnzSbJyAtmgvprUW58rDLY7Vdf"
			]
		},
		"contracts/libs/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
				"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
			]
		},
		"contracts/libs/@openzeppelin/contracts/token/common/ERC2981.sol": {
			"keccak256": "0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3",
			"license": "MIT",
			"urls": [
				"bzz-raw://9c6d7cfaac6b54599068126b75474c86ccbbaf386c3581abf82d9cda21b35c81",
				"dweb:/ipfs/QmPZteoCvkiUgv4TZxv2wiEKR5KqM83UCohHnSGw1RytpM"
			]
		},
		"contracts/libs/@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10",
			"license": "MIT",
			"urls": [
				"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487",
				"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG"
			]
		},
		"contracts/libs/@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"contracts/libs/@openzeppelin/contracts/utils/Counters.sol": {
			"keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
			"license": "MIT",
			"urls": [
				"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee",
				"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"
			]
		},
		"contracts/libs/@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
				"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
			]
		},
		"contracts/libs/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5",
			"license": "MIT",
			"urls": [
				"bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900",
				"dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2"
			]
		},
		"contracts/libs/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
			"keccak256": "0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7",
			"license": "MIT",
			"urls": [
				"bzz-raw://d5f49013d50b1011c842f76e96f3c3f146ca7cb15084c8805575e0e0e1a5c700",
				"dweb:/ipfs/QmQ3n5qiuioUA74heD6ZddNkYg1kYihjQBNcy9zgwYXKgM"
			]
		},
		"contracts/libs/@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
			"keccak256": "0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81",
			"license": "MIT",
			"urls": [
				"bzz-raw://392c009a19ece7831c9851d8f47fa8a1ee7ae81eeff01040a976cc110b0b9a3b",
				"dweb:/ipfs/QmbtmS8RRPVNghAu9qWieesPkyrabQSypVpgbyhfzzubCe"
			]
		},
		"contracts/libs/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
			"keccak256": "0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7",
			"license": "MIT",
			"urls": [
				"bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba",
				"dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT"
			]
		},
		"contracts/libs/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"contracts/libs/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"contracts/metatx/ERC2771ContextFromStorage.sol": {
			"keccak256": "0xf07b572c9dc46b81410334baf01531835cf3343e1fa553115c2b319191dc3e35",
			"license": "MIT",
			"urls": [
				"bzz-raw://91b73aa2ac2dc2c4aefce575f7acf5685ee33ce88146301146b553423bf02f07",
				"dweb:/ipfs/QmUocS7zftLYk9smKqrPaCVA8WaNC2Xdzuh9iV5KJ1h8fR"
			]
		}
	},
	"version": 1
}